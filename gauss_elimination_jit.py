# -*- coding: utf-8 -*-
"""Gauss_Elimination_jit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xOHG6SieEenf_BCRoSbhcvRma9mGq3V6
"""

#Normal gauss elimination
import sys
import numpy as np
import time
import numba
from numba import jit

@jit(nopython=True)
def initMatrix(nsize):
    new_mat = np.zeros((nsize,nsize));
    b_vect = np.zeros((nsize,1));
    for i in range(0,nsize,1):
      b_vect[i] = i;
      for j in range(0,nsize,1):
        if j < i:
          new_mat[i][j] = 2*(j+1);
        if j >= i:
          new_mat[i][j] = 2*(i+1);
    return new_mat,b_vect
@jit(nopython=True)
def Gauss_Elimination(nsize):
  x = np.zeros((nsize,1));
  A_i, b_i = initMatrix(nsize);
  A_aug = np.hstack((A_i,b_i));
  for k in range(0,nsize,1):
    column_vect = np.absolute(A_aug[k:nsize,k]);
    big = max(column_vect);
    i = np.argmax(column_vect);
    ipr = i+k
    if ipr != k:
      Temp = A_aug[k,:];
      A_aug[k,:] = A_aug[ipr,:];
      A_aug[ipr,:] = Temp;
    for i in range(k+1,nsize,1):
      factor = A_i[i,k]/A_i[k,k];
      A_aug[i,k:nsize+1] = A_aug[i,k:nsize+1]-factor*A_aug[k,k:nsize+1];
  x[nsize-1] = A_aug[nsize-1,nsize]/A_aug[nsize-1,nsize-1]
  for i in range(nsize-2,-1,-1):
    Coef_comp = A_aug[i,i+1:nsize];
    X_comp = x[i+1:nsize];
    mat_pro = np.dot(Coef_comp,X_comp);
    x[i] = (A_aug[i,nsize]-mat_pro)/(A_aug[i,i])
  return x
@jit(nopython=True)
def Gauss_Check(x,nsize):
  for n in range(nsize-1):
    if n == 0:
      assert (x[n] == -0.5);
    elif n == nsize-1:
      assert (x[n] == 0.5);
    else:
      assert (x[n] == 0);

def main(nsize):
  start_time = time.time();
  x = Gauss_Elimination(nsize);
  end_time = time.time();
  elapsed_time = end_time-start_time;
  print('Size: rows', nsize)
  print('Time Elapsed: Seconds ', elapsed_time)
  Gauss_Check(x,nsize);
  print('Correct solution found.')

main(int(sys.argv[1]))